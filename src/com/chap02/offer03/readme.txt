请实现一个函数，把字符串中的每个空格替换成“%20”。例如输入“We are happy.”，则输出“We%20are%20happy.”。

第一思路：
（1）：是在原来的字符串上做替换（一定要保证内存够用）还是在新创建的字符串并在新的字符串上做替换。因为“ ”替换成“%20”字符串的长度会增加；1
（2）：最直观的做法是O（n^2）的解法；从头到尾扫描字符串，每一次碰到空格的时候做替换。由于是把一个字符替换成3个字符，
我们必须要把后面的所有字符都后移两个字节，否则就有两个字符被覆盖了。故假设字符串的长度是n，对每个空格字符，需要移动后面O（n）个字符，
因此对含有O（n）个空格的字符串而言总的时间效率是O（n^2）。

最优解思路：

上面的做法会使时间复杂度达到O（n^2），于是需要提升上面的解题思路使其时间复杂度达到O（n^2）;先遍历一遍字符串统计出字符串中空格的总长度，
因每次替换一个空格长度+2；故所需的总长度为oldLenth + blankCount * 2；上次我们的时间复杂度达到n的平方，是因为每次替换一个空格，
我们的后面的字符串都要移动造成的，故这次我们从后往前移动，使字符在第一次就到达自己的位置上，故这样做的话时间复杂度为O（n）;



利用Java自己的函数replace(param, param, param)函数帮助我们替换字符串。我们只需要找到空格的位置即可