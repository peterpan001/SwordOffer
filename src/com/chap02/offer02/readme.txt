二维数组的查找：
在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数

思路：在二维数组中选取一个数字，分3种情况来查找的过程。
1：选取的数字和target相等，则查找过程结束；
2：选取的数字小于target，则要查找的数字在当前选取项的右方或者下方；
3：选取的数字大于target，则要查找的数字在当前选取项的上方或者左方。
我第一次接触这个题目时，傻傻的从array[0][0]开始分析上面的3种情况，然后就陷入苦恼的脑力风暴中，深深不得解决之道，因为左方和上方或者右方和下方的重叠区域。
后来读了剑指offer的解题思路得知，如果我们每次的比较能排除某一列或者某一行来解决找到target问题，这道题目就很快解决。故需要选取右上方的数组元素，或者左下方的数组元素。
这样每次比较一次target都会排除一行或者一列，随着比较次数的增加，我们需要查找的target范围越来越小。问题得到解决。
故：首先选取数组中右上角的数字：如果该数字等于要查找的数字，查找过程结束；如果该数字大于要查找的数字，则剔除这个数字所在的列；如果该数字小于要查找的数字，则剔除这个数字所在的行。
即：如果要查找的数字不在数组的有上角，则每次都在数组的查找范围剔除一行或者一列，这样每一步都可以缩小查找的范围，直到找到要查找的数字，或者查找范围为空。
